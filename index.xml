<!DOCTYPE html>
<html>
	<head>
		<meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
		<meta charset="utf-8" /> 
		<title>kplot: Cairo plotting library</title>
		<link rel="stylesheet" href="index.css" type="text/css" />
	</head>
	<body>
		<header>
			<h1>kplot</h1>
			<div>&mdash;</div>
			<div>Cairo plotting library</div>
		</header>
		<p>
			<span class="nm">kplot</span> is an ISO C, <a href="http://opensource.org/licenses/ISC" rel="license">ISC</a>-licensed
			programming library for plotting graphs on a <a href="http://cairographics.org">Cairo</a> surface.
			It handles margins, axis labels, tic labels, tics, borders, grids, and the data itself.
			The mission of <span class="nm">kplot</span> is to allow a programming interface to a vaguely <a
				href="http://www.gnuplot.info">gnuplot(1)</a>-like system on Cairo contexts embeddable in applications and web
			applications.
			For a complete reference, please refer to <a href="kplot.3.html">kplot(3)</a>, which documents the library.
			The current version is @@VERSION@@, <a href="snapshots/kplot.tgz">kplot.tgz</a> (<a href="snapshots/kplot.tgz.sha512">SHA512</a>).
			For older versions, look in the <a href="snapshots">archive</a>.
		</p>
		<figure>
			<pre>#include &lt;cairo.h&gt;
#include &lt;math.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;<a href="kplot.3.html">kplot.h</a>&gt;

int
main(void)
{
	struct kpair	 points1[50], points2[50];
	struct kdata	*d1, *d2;
	struct kplot	*p;
	cairo_surface_t	*surf;
	size_t		 i;
	cairo_t		*cr;

	for (i = 0; i &lt; 50; i++) {
		points1[i].x = points2[i].x = (i + 1) / 50.0;
		points1[i].y = log((i + 1) / 50.0);
		points2[i].y = -log((i + 1) / 50.0) + points1[0].y;
	}
	d1 = <a href="kdata_array_alloc.3.html">kdata_array_alloc</a>(points1, 50);
	d2 = <a href="kdata_array_alloc.3.html">kdata_array_alloc</a>(points2, 50);
	p = <a href="kplot_alloc.3.html">kplot_alloc</a>();
	<a href="kplot_data_add.3.html">kplot_data_add</a>(p, d1, KPLOT_POINTS, NULL);
	<a href="kplot_data_add.3.html">kplot_data_add</a>(p, d2, KPLOT_LINES, NULL);
	<a href="kdata_destroy.3.html">kdata_destroy</a>(d1);
	<a href="kdata_destroy.3.html">kdata_destroy</a>(d2);
	surf = cairo_image_surface_create
		(CAIRO_FORMAT_ARGB32, 600, 400);
	cr = cairo_create(surf);
	cairo_surface_destroy(surf);
	<a href="kplot_draw.3.html">kplot_draw</a>(p, 600.0, 400.0, cr, NULL);
	cairo_surface_write_to_png
		(cairo_get_target(cr), "<a href="example0.png">example0.png</a>");
	cairo_destroy(cr);
	<a href="kplot_free.3.html">kplot_free</a>(p);
	return(EXIT_SUCCESS);
}</pre>
			<figcaption>
				By way of introduction, consider the above example.
				(<em>Note</em>: this does not do any error checking.)
				It accepts two fixed arrays <code>points1</code> and <code>points2</code> and graphs them with the default style.
				It produces <a href="example0.png">example0.png</a>.
			</figcaption>
		</figure>
		<footer>
			&copy; 2014, <a href="http://kristaps.bsd.lv">Kristaps Dzonsons</a>
		</footer>
	</body>
</html>
